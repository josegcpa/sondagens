poly(train_set$Sepal.Width,i),
poly(train_set$Petal.Length,i),
poly(train_set$Petal.Width,i))
y <- train_set$Species
model <- cv.glmnet(x,y,family = "multinomial")
test_x <- cbind(
poly(test_set$Sepal.Length,i),
poly(test_set$Sepal.Width,i),
poly(test_set$Petal.Length,i),
poly(test_set$Petal.Width,i))
test_y <- test_set$Species
O[[i]] <- list(
test_acc = sum(predict(model,test_x) == test_y) / length(test_y),
train_acc = sum(predict(model,x) == y) / length(y),
degree = i)
}
O <- list()
for (i in 1:20) {
print(i)
x <- cbind(
poly(train_set$Sepal.Length,i),
poly(train_set$Sepal.Width,i),
poly(train_set$Petal.Length,i),
poly(train_set$Petal.Width,i))
y <- train_set$Species
model <- cv.glmnet(x,y,family = "multinomial")
test_x <- cbind(
poly(test_set$Sepal.Length,i),
poly(test_set$Sepal.Width,i),
poly(test_set$Petal.Length,i),
poly(test_set$Petal.Width,i))
test_y <- test_set$Species
O[[i]] <- list(
test_acc = sum(predict(model,test_x) == test_y) / length(test_y),
train_acc = sum(predict(model,x) == y) / length(y),
degree = i)
}
train_set %>% nrow
nrow(train_set)
O <- list()
for (i in 1:16) {
print(i)
x <- cbind(
poly(train_set$Sepal.Length,i),
poly(train_set$Sepal.Width,i),
poly(train_set$Petal.Length,i),
poly(train_set$Petal.Width,i))
y <- train_set$Species
model <- cv.glmnet(x,y,family = "multinomial")
test_x <- cbind(
poly(test_set$Sepal.Length,i),
poly(test_set$Sepal.Width,i),
poly(test_set$Petal.Length,i),
poly(test_set$Petal.Width,i))
test_y <- test_set$Species
O[[i]] <- list(
test_acc = sum(predict(model,test_x) == test_y) / length(test_y),
train_acc = sum(predict(model,x) == y) / length(y),
degree = i)
}
O <- list()
for (i in 1:15) {
print(i)
x <- cbind(
poly(train_set$Sepal.Length,i),
poly(train_set$Sepal.Width,i),
poly(train_set$Petal.Length,i),
poly(train_set$Petal.Width,i))
y <- train_set$Species
model <- cv.glmnet(x,y,family = "multinomial")
test_x <- cbind(
poly(test_set$Sepal.Length,i),
poly(test_set$Sepal.Width,i),
poly(test_set$Petal.Length,i),
poly(test_set$Petal.Width,i))
test_y <- test_set$Species
O[[i]] <- list(
test_acc = sum(predict(model,test_x) == test_y) / length(test_y),
train_acc = sum(predict(model,x) == y) / length(y),
degree = i)
}
do.call(rbind,O)
predict(model,test_x)
predict(model,test_x,type = "response")
predict(model,test_x,type = "class")
O <- list()
for (i in 1:15) {
print(i)
x <- cbind(
poly(train_set$Sepal.Length,i),
poly(train_set$Sepal.Width,i),
poly(train_set$Petal.Length,i),
poly(train_set$Petal.Width,i))
y <- train_set$Species
model <- cv.glmnet(x,y,family = "multinomial")
test_x <- cbind(
poly(test_set$Sepal.Length,i),
poly(test_set$Sepal.Width,i),
poly(test_set$Petal.Length,i),
poly(test_set$Petal.Width,i))
test_y <- test_set$Species
O[[i]] <- list(
test_acc = sum(predict(model,test_x,type = "class") == test_y) / length(test_y),
train_acc = sum(predict(model,x,type = "class") == y) / length(y),
degree = i)
}
O <- do.call(rbind,O)
plot(O)
O
dim(iris)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModelling)
library(AppliedPredictiveModeling)
data(abalone)
train_idx <- sample(nrow(abalone),size = round(nrow(abalone)*0.7),replace = F)
train_set <- abalone[train_idx,]
test_set <- abalone[-train_idx,]
abalone
do.call(
cbind,
apply(train_set,2,function(x) poly(x,i)))
train_set
do.call(
cbind,
apply(train_set[2:ncol(train_set)],2,function(x) poly(x,i)))
apply(train_set[2:ncol(train_set)],2,function(x) poly(x,i))
i
apply(train_set[2:ncol(train_set)],2,function(x) poly(x,))
apply(train_set[2:ncol(train_set)],2,function(x) poly(x,1))
apply(train_set[2:ncol(train_set)],2,function(x) poly(x,2))
apply(train_set[2:ncol(train_set)],2,function(x) poly(x,3))
apply(train_set[2:ncol(train_set)],2,function(x) poly(x,4))
apply(train_set[2:ncol(train_set)],2,function(x) poly(x,5))
apply(train_set[2:ncol(train_set),],2,function(x) poly(x,6))
apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,6))
apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,50))
apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,40))
apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,30))
apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,20))
apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,10))
apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,15))
apply(train_set[,2:ncol(train_set)],2,function(x) {print(x); poly(x,15)})
apply(train_set[,2:ncol(train_set)],2,function(x) {print(length(x)); poly(x,15)})
apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,50))
apply(train_set[,2:ncol(train_set)],2,function(x) {print(length(x)); poly(x,15)})
apply(train_set[,2:ncol(train_set)],2,function(x) {print(length(x)); poly(x,15)})
apply(train_set[,2:ncol(train_set)],2,function(x) {print(length(x)); poly(x,14)})
apply(train_set[,2:ncol(train_set)],2,function(x) {print(length(x)); poly(x,13)})
apply(train_set[,2:ncol(train_set)],2,function(x) {print(length(x)); poly(x,12)})
apply(train_set[,2:ncol(train_set)],2,function(x) {print(length(x)); poly(x,10)})
train_set_means <- colMeans(abalone[,2:ncol(train_set)])
train_set_sds <- apply(abalone[,2:ncol(train_set)],2,sd)
train_set_sds
train_set <- cbind(
train_set$Type,
(train_set[,-1] - train_set_means)/train_set_sds
)
train_set
train_set <- abalone[train_idx,]
train_set_means <- colMeans(abalone[,2:ncol(train_set)])
train_set_sds <- apply(abalone[,2:ncol(train_set)],2,sd)
train_set <- cbind(
Type = train_set$Type,
(train_set[,-1] - train_set_means)/train_set_sds
)
test_set <- abalone[-train_idx,]
test_set <- cbind(
Type = test_set$Type,
(test_set[,-1] - train_set_means)/train_set_sds
)
do.call(
cbind,
apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,i)))
do.call(
cbind,
apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,10)))
do.call(
cbind,
apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,1)))
apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,2))
apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,3))
apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,4))
apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,5))
apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,6))
apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,7))
apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,10))
apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,9))
apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,9)) %>% min
min(apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,9)))
max(apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,9)))
O <- list()
for (i in 1:9) {
print(i)
x <- do.call(
cbind,
apply(train_set[2:ncol(train_set)],2,function(x) poly(x,i)))
y <- train_set$Species
model <- cv.glmnet(x,y,family = "multinomial")
test_x <- do.call(
cbind,
apply(train_set[2:ncol(test_x)],2,function(x) poly(x,i)))
test_y <- test_set$Species
O[[i]] <- list(
test_acc = sum(predict(model,test_x,type = "class") == test_y) / length(test_y),
train_acc = sum(predict(model,x,type = "class") == y) / length(y),
degree = i)
}
O <- list()
for (i in 1:9) {
print(i)
x <- train_set[2:ncol(train_set)],2,function(x) poly(x,i))
y <- train_set$Species
model <- cv.glmnet(x,y,family = "multinomial")
test_x <- apply(train_set[2:ncol(test_x)],2,function(x) poly(x,i))
test_y <- test_set$Species
O[[i]] <- list(
test_acc = sum(predict(model,test_x,type = "class") == test_y) / length(test_y),
train_acc = sum(predict(model,x,type = "class") == y) / length(y),
degree = i)
}
x <- train_set[2:ncol(train_set)],2,function(x) poly(x,i))
x <- train_set[,2:ncol(train_set)],2,function(x) poly(x,i))
print(i)
x <- apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,i))
y <- train_set$Species
model <- cv.glmnet(x,y,family = "multinomial")
test_x <- apply(train_set[,2:ncol(test_x)],2,function(x) poly(x,i))
test_x <- apply(test_set[,2:ncol(test_x)],2,function(x) poly(x,i))
test_set <- abalone[-train_idx,]
test_set <- cbind(
Type = test_set$Type,
(test_set[,-1] - train_set_means)/train_set_sds
)
test_set
test_x <- apply(test_set[,2:ncol(test_x)],2,function(x) poly(x,i))
2:ncol(test_x)
2:ncol(train_set)
test_x <- apply(test_set[,2:ncol(test_set)],2,function(x) poly(x,i))
test_y <- test_set$Species
O[[i]] <- list(
test_acc = sum(predict(model,test_x,type = "class") == test_y) / length(test_y),
train_acc = sum(predict(model,x,type = "class") == y) / length(y),
degree = i)
predict(model,test_x,type = "class") == test_y
predict(model,test_x,type = "class")
print(i)
x <- apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,i,raw = T))
apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,1,raw = T))
apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,10,raw = T))
apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,20,raw = T))
apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,30,raw = T))
apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,40,raw = T))
apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,50,raw = T))
dim(apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,50,raw = T)))
x <- apply(train_set[,2:ncol(train_set)],2,function(x) list(poly(x,i,raw = T)))
x
x %>% length
length(x)
x <- do.call(
rbind,
apply(train_set[,2:ncol(train_set)],2,function(x) list(poly(x,i,raw = T)))
)
x
x <- do.call(
cbind,
apply(train_set[,2:ncol(train_set)],2,function(x) list(poly(x,i,raw = T)))
)
x
x <- do.call(
cbind,
apply(train_set[,2:ncol(train_set)],2,function(x) poly(x,i,raw = T))
)
x <- do.call(
cbind,
lapply(2:ncol(train_set),function(x) poly(train_set[,x],i,raw=T))
)
dim(x)
lapply(2:ncol(train_set),function(x) poly(train_set[,x],i,raw=T))
length(lapply(2:ncol(train_set),function(x) poly(train_set[,x],i,raw=T)))
lapply(2:ncol(train_set),function(x) poly(train_set[,x],2,raw=T))
x <- do.call(
cbind,
lapply(2:ncol(train_set),function(x) poly(train_set[,x],2,raw=T))
)
dim(x)
O <- list()
for (i in 1:40) {
print(i)
x <- do.call(
cbind,
lapply(2:ncol(train_set),function(x) poly(train_set[,x],i,raw=T))
)
y <- train_set$Species
model <- cv.glmnet(x,y,family = "multinomial")
test_x <- do.call(
cbind,
lapply(2:ncol(test_set),function(x) poly(test_set[,x],i,raw=T))
)
test_y <- test_set$Species
O[[i]] <- list(
test_acc = sum(predict(model,test_x,type = "class") == test_y) / length(test_y),
train_acc = sum(predict(model,x,type = "class") == y) / length(y),
degree = i)
}
O <- list()
for (i in 1:40) {
print(i)
x <- do.call(
cbind,
lapply(2:ncol(train_set),function(x) poly(train_set[,x],i,raw=T))
)
y <- train_set$Type
model <- cv.glmnet(x,y,family = "multinomial")
test_x <- do.call(
cbind,
lapply(2:ncol(test_set),function(x) poly(test_set[,x],i,raw=T))
)
test_y <- test_set$Type
O[[i]] <- list(
test_acc = sum(predict(model,test_x,type = "class") == test_y) / length(test_y),
train_acc = sum(predict(model,x,type = "class") == y) / length(y),
degree = i)
}
data(abalone)
DATASET <- iris
train_idx <- sample(nrow(DATASET),size = round(nrow(DATASET)*0.7),replace = F)
train_set <- DATASET[train_idx,]
train_set_means <- colMeans(DATASET[,2:ncol(train_set)])
train_set_sds <- apply(DATASET[,2:ncol(train_set)],2,sd)
train_set <- cbind(
Type = train_set$Type,
(train_set[,-1] - train_set_means)/train_set_sds
)
test_set <- DATASET[-train_idx,]
test_set <- cbind(
Type = test_set$Type,
(test_set[,-1] - train_set_means)/train_set_sds
)
O <- list()
for (i in 1:30) {
print(i)
x <- do.call(
cbind,
lapply(2:ncol(train_set),function(x) poly(train_set[,x],i,raw=T))
)
y <- train_set$Type
model <- cv.glmnet(x,y,family = "multinomial")
test_x <- do.call(
cbind,
lapply(2:ncol(test_set),function(x) poly(test_set[,x],i,raw=T))
)
test_y <- test_set$Type
O[[i]] <- list(
test_acc = sum(predict(model,test_x,type = "class") == test_y) / length(test_y),
train_acc = sum(predict(model,x,type = "class") == y) / length(y),
degree = i)
}
O <- do.call(rbind,O)
O <- list()
for (i in 1:30) {
print(i)
x <- do.call(
cbind,
lapply(2:ncol(train_set),function(x) poly(train_set[,x],i,raw=T))
)
y <- train_set[,1]
model <- cv.glmnet(x,y,family = "multinomial")
test_x <- do.call(
cbind,
lapply(2:ncol(test_set),function(x) poly(test_set[,x],i,raw=T))
)
test_y <- test_set[,1]
O[[i]] <- list(
test_acc = sum(predict(model,test_x,type = "class") == test_y) / length(test_y),
train_acc = sum(predict(model,x,type = "class") == y) / length(y),
degree = i)
}
y
O <- list()
for (i in 1:30) {
print(i)
x <- do.call(
cbind,
lapply(1:(ncol(train_set)-1),function(x) poly(train_set[,x],i,raw=T))
)
y <- train_set$Species
model <- cv.glmnet(x,y,family = "multinomial")
test_x <- do.call(
cbind,
lapply(1:(ncol(test_set)-1),function(x) poly(test_set[,x],i,raw=T))
)
test_y <- test_set[,1]
O[[i]] <- list(
test_acc = sum(predict(model,test_x,type = "class") == test_y) / length(test_y),
train_acc = sum(predict(model,x,type = "class") == y) / length(y),
degree = i)
}
O <- do.call(rbind,O)
plot(O)
O
colnames(O)
predict(model,x,type = "class") == y)
predict(model,x,type = "class") == y
predict(model,x,type = "class") == ypredict(model,test_x,type = "class")
predict(model,test_x,type = "class")
test_y
O <- list()
for (i in 1:30) {
print(i)
x <- do.call(
cbind,
lapply(1:(ncol(train_set)-1),function(x) poly(train_set[,x],i,raw=T))
)
y <- train_set$Species
model <- cv.glmnet(x,y,family = "multinomial")
test_x <- do.call(
cbind,
lapply(1:(ncol(test_set)-1),function(x) poly(test_set[,x],i,raw=T))
)
test_y <- test_set$Species
O[[i]] <- list(
test_acc = sum(predict(model,test_x,type = "class") == test_y) / length(test_y),
train_acc = sum(predict(model,x,type = "class") == y) / length(y),
degree = i)
}
O <- do.call(rbind,O)
plot(O)
colnames(O)
plot(O[,3],O[,2])
plot(O[,3],O[,2])
points(O[,3],O[,1],col = "red")
plot(O[,3],O[,2],ylim = c(0.5,1))
points(O[,3],O[,1],col = "red")
data(abalone)
DATASET <- abalone
train_idx <- sample(nrow(DATASET),size = round(nrow(DATASET)*0.7),replace = F)
train_set <- DATASET[train_idx,]
train_set_means <- colMeans(DATASET[,2:ncol(train_set)])
train_set_sds <- apply(DATASET[,2:ncol(train_set)],2,sd)
train_set <- cbind(
Type = train_set$Type,
(train_set[,-1] - train_set_means)/train_set_sds
)
test_set <- DATASET[-train_idx,]
test_set <- cbind(
Type = test_set$Type,
(test_set[,-1] - train_set_means)/train_set_sds
)
O <- list()
for (i in 1:50) {
print(i)
x <- do.call(
cbind,
lapply(2:(ncol(train_set)),function(x) poly(train_set[,x],i,raw=T))
)
y <- train_set[,1]
model <- cv.glmnet(x,y,family = "multinomial")
test_x <- do.call(
cbind,
lapply(2:(ncol(test_set)),function(x) poly(test_set[,x],i,raw=T))
)
test_y <- test_set[,1]
O[[i]] <- list(
test_acc = sum(predict(model,test_x,type = "class") == test_y) / length(test_y),
train_acc = sum(predict(model,x,type = "class") == y) / length(y),
degree = i)
}
setwd("~/Personal Google Drive/personal_projects/programming projects/shiny/B-A-BA-Sondagens")
library(shiny)
runApp()
runApp()
runApp()
?pnorm
pnorm(1)
pnorm(10)
pnorm(-10)
pnorm(10,lower.tail = T)
pnorm(10,lower.tail = F)
cut(c(0.005),breaks = c(1,0.05,0.01,0.005,0),c("n.s.","*","**","***","****"))
cut(c(0.005),breaks = c(1,0.05,0.01,0.005,0),c("n.s.","*","**","***"))
cut(c(0.005),breaks = c(1,0.05,0.01,0.005,0),labels = c("n.s.","*","**","***"))
cut(c(0.005),breaks = c(1,0.05,0.01,0.005,0),labels = c("n.s.","*","**","***"),include.lowest = T)
cut(c(0.005),breaks = c(1,0.05,0.01,0.005,0),labels = c("n.s.","*","**","***"),include.lowest = T)
cut(c(0.0005),breaks = c(1,0.05,0.01,0.005,0),labels = c("n.s.","*","**","***"),include.lowest = T)
cut(c(0.5),breaks = c(1,0.05,0.01,0.005,0),labels = c("n.s.","*","**","***"),include.lowest = T)
cut(c(0.02),breaks = c(1,0.05,0.01,0.005,0),labels = c("n.s.","*","**","***"),include.lowest = T)
cut(c(0.02),breaks = c(0,0.005,0.01,0.05,1),labels = c("***","**","*","n.s.x"),include.lowest = T)
cut(c(0.02),breaks = c(0,0.005,0.01,0.05,1),labels = c("***","**","*","n.s."),include.lowest = T)
cut(c(0.05),breaks = c(0,0.005,0.01,0.05,1),labels = c("***","**","*","n.s."),include.lowest = T)
cut(c(0.06),breaks = c(0,0.005,0.01,0.05,1),labels = c("***","**","*","n.s."),include.lowest = T)
cut(c(0.05),breaks = c(0,0.005,0.01,0.05,1),labels = c("***","**","*","n.s."),include.lowest = T)
cut(c(0.04),breaks = c(0,0.005,0.01,0.05,1),labels = c("***","**","*","n.s."),include.lowest = T)
cut(c(0.01),breaks = c(0,0.005,0.01,0.05,1),labels = c("***","**","*","n.s."),include.lowest = T)
cut(c(0.005),breaks = c(0,0.005,0.01,0.05,1),labels = c("***","**","*","n.s."),include.lowest = T)
cut(c(0.004),breaks = c(0,0.005,0.01,0.05,1),labels = c("***","**","*","n.s."),include.lowest = T)
runApp()
runApp()
prop.test(x = c(0.05,0.10),n = c(100,100))
prop.test(x = c(0.05,0.10),n = c(100,1000))
prop.test(x = c(0.05,0.10),n = c(1000,1000))
prop.test(x = c(0.05,0.10),n = c(1000,10000))
prop.test(x = c(0.05*1000,0.10*1000),n = c(1000,10000))
pnorm(1.0)
pnorm(1.02)
pnorm(1.02,lower.tail = T)
pnorm(1.02,lower.tail = F)
pnorm(abs(1.02),lower.tail = F)
pnorm(abs(1.02),lower.tail = F)*2
qnorm(0.95)
qnorm(0.9)
qnorm(0.975)
runApp()
